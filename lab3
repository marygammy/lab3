NAME_I = 0
CODE_I = 1
WEIGHT_I = 2
COST_I = 3

def equipment():
  return [('Винтовка', 'в', 3,	25)\
    , ('Пистолет', 'п', 2, 15) \
    , ('Боекомплект', 'б', 2, 15) \
    , ('Аптечка',	'а', 2,	20) \
    , ('Ингалятор',	'и', 1,	5) \
    , ('Нож',	'н', 1, 15) \
    , ('Топор',	'т', 3,	20) \
    , ('Оберег', 'о', 1, 25) \
    , ('Фляжка', 'ф', 1, 15) \
    , ('Антидот',	'д', 1, 10) \
    , ('Еда',	'к', 2, 20) \
    , ('Арбалет',	'р', 2,	20) \
    ]

def initials_v10():
    return ((3,3), [], 10)

def knapsack_calc(capacity, stuff):
    N = len(stuff)
    K = [[0 for i in range(capacity+1)] for j in range(N+1)]
    for i in range(1, N+1):
        for j in range(1, capacity+1):
            if stuff[i-1][WEIGHT_I] <= j:
                K[i][j] = max(stuff[i-1][COST_I] + K[i-1][j - stuff[i-1][WEIGHT_I]], K[i-1][j])
            else:
                K[i][j] = K[i - 1][j] - stuff[i-1][WEIGHT_I]
    return K

def add_mandatory(layout, dim, mandatory_stuff):
    k = 0
    for item in mandatory_stuff:
        for kk in range(item[WEIGHT_I]):
            layout[int(k/dim[1])][int(k%dim[1])] = item[CODE_I]
            k += 1
    return k

def knapsack_decode(rates, stuff, dim, mandatory_stuff):
    layout = [['' for i in range(dim[0])] for j in range(dim[1])]
    res = rates[-1][-1]
    k = add_mandatory(layout, dim, mandatory_stuff)
    i, j, total = len(stuff), len(rates[0])-1, 0
    while i > 0 and res > 0:
        if res != rates[i-1][j]:
            weight = stuff[i-1][WEIGHT_I]
            code = stuff[i-1][CODE_I]
            for kk in range(weight):
                layout[int(k/dim[1])][int(k%dim[1])] = code
                k += 1
            total += stuff[i - 1][WEIGHT_I]
            res -= stuff[i - 1][COST_I]
            j -= stuff[i - 1][WEIGHT_I]
        i -= 1
    return layout

def total_cost(stuff):
    return sum(item[COST_I] for item in stuff)

def print_array(a):
    N = len(a)
    for i in range(N):
        print(a[i])

def main():
  stuff = equipment()
  #print(total_cost(stuff))

  (dim, mandatory_stuff, initial_rate) = initials_v10()
  capacity = dim[0] * dim[1] - sum(stuff[i][WEIGHT_I] for i in mandatory_stuff)
  stuff_filtered = [stuff[i] for i in range(len(stuff)) if not i in mandatory_stuff]
  K = knapsack_calc(capacity, stuff_filtered)
  #print(K)

  layout = knapsack_decode(K, stuff_filtered, dim, [stuff[i] for i in mandatory_stuff])
  final_rate =  2*K[-1][-1] + initial_rate - total_cost(stuff)
  if final_rate > 0:
      print_array(layout)
      print("Итоговые очки выживания: ", final_rate)
  else:
      print("Том не выживет")

main()
